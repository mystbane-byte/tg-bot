import logging
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
SUPPORT_USER_ID = int(os.getenv("SUPPORT_USER_ID"))
DISCORD_LINK = os.getenv("DISCORD_LINK")
SERVER_IP = os.getenv("SERVER_IP")
SERVER_IP2 = os.getenv("SERVER_IP2")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üöÄ Start")
    kb.button(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É")
    kb.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

def get_buy_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton(text="ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?id={SUPPORT_USER_ID}")]
        ]
    )

def get_start_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É", callback_data="buy_pass")],
            [InlineKeyboardButton(text="ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?id={SUPPORT_USER_ID}")]
        ]
    )

# === –¢–µ–∫—Å—Ç—ã ===
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ—Ö–æ–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä **SculkED** (Minecraft Java).\n\n"
    "üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
    "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É (–°–±–µ—Ä/–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n\n"
    
    "‚è≥ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.\n\n"
    
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –í–∞—à –Ω–∏–∫–Ω–µ–π–º Minecraft –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist."
)

PRODUCT_TEXT = (
    "üíé *–ü—Ä–æ—Ö–æ–¥–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä SculkED*\n\n"
    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n\n"
    "1) –ù–∞ –¥–≤–∞ —Å –ø–æ–ª–æ–≤–∏–Ω–æ–π –º–µ—Å—è—Ü–∞ ‚Äî 250‚ÇΩ\n"
    "2) –ù–∞ –æ–¥–∏–Ω —Å–µ–∑–æ–Ω (1 –≥–æ–¥) ‚Äî 450‚ÇΩ\n"
    "3) (–ü—Ä–æ—Ö–æ–¥–∫–∞ +) –Ω–∞ 2 —Å–µ–∑–æ–Ω–∞ (2 –≥–æ–¥–∞) ‚Äî 550‚ÇΩ\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\n"
    "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º."
)

PAYMENT_DETAILS_TEXT = (
    "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
    "‚Ä¢ **–°–±–µ—Ä–±–∞–Ω–∫:** `2202 2032 7696 2364`\n"
    "‚Ä¢ **–¢–∏–Ω—å–∫–æ—Ñ—Ñ:** `2200 7009 4965 0401`\n\n"
    
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–∫–æ–º Minecraft –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å –±–æ—Ç–æ–º.\n\n"
    "P.S. –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
)

SUPPORT_TEXT = (
    "üìû *–°–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π:*\n\n"
    f"‚Ä¢ ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
    f"  [–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É](tg://user?id={SUPPORT_USER_ID})\n\n"
    "‚è≥ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ ===
def is_private_chat(message: Message):
    return message.chat.type == "private"

# === /start ===
@dp.message(F.text.in_(["/start", "üöÄ Start"]))
async def start_cmd(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(WELCOME_TEXT, reply_markup=get_start_keyboard())
    await message.answer("üëá –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

# === –ö–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É" –∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" ===
@dp.message(F.text == "üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É")
async def buy_pass(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(PRODUCT_TEXT, reply_markup=get_buy_keyboard())

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(SUPPORT_TEXT)

@dp.callback_query(F.data == "buy_pass")
async def process_buy_pass(callback: CallbackQuery):
    await callback.message.answer(PRODUCT_TEXT, reply_markup=get_buy_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "payment_details")
async def payment_details(callback: CallbackQuery):
    await callback.message.answer(PAYMENT_DETAILS_TEXT)
    await callback.answer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å –Ω–∏–∫–æ–º ===
@dp.message(F.content_type == ContentType.PHOTO)
async def handle_screenshot(message: Message):
    if not is_private_chat(message):
        return
    if not message.caption:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{message.from_user.id}")]
        ]
    )

    try:
        await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=message.photo[-1].file_id,
            caption=f"–°–∫—Ä–∏–Ω –æ—Ç @{message.from_user.username} (–Ω–∏–∫: {message.caption})",
            reply_markup=kb
        )
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è Discord –∏ IP —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ADMIN_CHAT_ID.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω–∞: {e}")

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º ===
@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_payment(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    try:
        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"üåê Discord —Å–µ—Ä–≤–µ—Ä: {DISCORD_LINK}\n\n"
                f"üñ•Ô∏è IP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –†–æ—Å—Å–∏–∏: {SERVER_IP}\n"
                f"üñ•Ô∏è IP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω: {SERVER_IP2}\n\n"
                f"‚ö†Ô∏è –í —Å–ª—É—á–∞–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç 2 –º–µ—Å—è—Ü–µ–≤, –ø—Ä–æ—Ö–æ–¥–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è.\n"
            )
        )
        await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        await callback.message.edit_caption(
            caption=f"{callback.message.caption}\n\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        )
    except Exception as e:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord/IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# === –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
@dp.message()
async def unknown_message(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

