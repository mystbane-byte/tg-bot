# bot_fixed_html.py
import os
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiosqlite

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID_ENV = os.getenv("ADMIN_CHAT_ID")
SUPPORT_USER_ID_ENV = os.getenv("SUPPORT_USER_ID")
DISCORD_LINK = os.getenv("DISCORD_LINK") or "https://discord.gg/your-link"
SERVER_IP = os.getenv("SERVER_IP") or "0.0.0.0"
SERVER_IP2 = os.getenv("SERVER_IP2") or "0.0.0.0"

# –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    logger.critical("TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞.")
    raise SystemExit("TOKEN is required")

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_ENV) if ADMIN_CHAT_ID_ENV else None
except ValueError:
    logger.exception("ADMIN_CHAT_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    ADMIN_CHAT_ID = None

try:
    SUPPORT_USER_ID = int(SUPPORT_USER_ID_ENV) if SUPPORT_USER_ID_ENV else None
except ValueError:
    logger.exception("SUPPORT_USER_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    SUPPORT_USER_ID = None

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ===
caption_storage: Dict[int, Dict[str, Any]] = {}

# === –£—Ç–∏–ª–∏—Ç—ã ===
def is_private_chat(message: Message) -> bool:
    return message.chat.type == "private"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard() -> ReplyKeyboardBuilder:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üöÄ Start")
    kb.button(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É")
    kb.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    kb.button(text="üìñ FAQ")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=False)

def get_buy_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data="payment_details")],
            [InlineKeyboardButton(text="ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?id={SUPPORT_USER_ID or 0}")]
        ]
    )

def get_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É", callback_data="buy_pass")],
            [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton(text="üìñ FAQ", callback_data="faq")]
        ]
    )

def history_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_history")]]
    )

# === –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π ===
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ—Ö–æ–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä <b>SculkED</b> (Minecraft Java 1.21.8).\n\n"
    "üí≥ <i>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</i>\n"
    "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É (–°–±–µ—Ä/–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n\n"
    "‚è≥ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.\n\n"
    "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–∞—à –Ω–∏–∫ Minecraft –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist.</i>"
)

PRODUCT_TEXT = (
    "üíé <b>–ü—Ä–æ—Ö–æ–¥–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä SculkED</b>\n\n"
    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n\n"
    "1) 2,5 –º–µ—Å—è—Ü–∞ ‚Äî <b>250‚ÇΩ</b>\n\n"
    "2) 1 —Å–µ–∑–æ–Ω (1 –≥–æ–¥) ‚Äî <b>450‚ÇΩ</b>\n\n"
    "3) 2 —Å–µ–∑–æ–Ω–∞ (2 –≥–æ–¥–∞) ‚Äî <b>550‚ÇΩ</b>\n\n"
    "‚ö†Ô∏è <i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.</i>\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
)

PAYMENT_DETAILS_TEXT = (
    "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
    "‚Ä¢ <b>–°–±–µ—Ä–±–∞–Ω–∫:</b> <code>2202 2032 7696 2364</code>\n"
    "‚Ä¢ <b>–¢–∏–Ω—å–∫–æ—Ñ—Ñ:</b> <code>2200 7009 4965 0401</code>\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —Å –Ω–∏–∫–æ–º Minecraft –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
    "<i>P.S. –°–∫—Ä–∏–Ω—à–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</i>"
)

SUPPORT_TEXT = (
    "üìû <b>–°–≤—è–∑—å —Å –∫–æ–º–∞–Ω–¥–æ–π:</b>\n\n"
    f"‚Ä¢ ü§ù –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
    f'  <a href="tg://user?id={SUPPORT_USER_ID or 0}">–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</a>\n\n'
    "‚è≥ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
)

FAQ_TEXT = (
    "üìñ *FAQ ‚Äî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"
    "‚ùì <i>–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –Ω–∏–∫ –≤ Minecraft?</i>\n"
    "üëâ –ù–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ª–∞—É–Ω—á–µ—Ä–µ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏ <i>–∏–≥—Ä–∞—Ç—å</i>).\n"
    "–ò–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞: https://www.minecraft.net/ru-ru\n"
    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å (—Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É) -> –ø—Ä–æ—Ñ–∏–ª—å -> –≤—Å–µ –∏–≥—Ä—ã -> –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
    "‚ùì <i>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã?</i>\n"
    "üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–∞—à –Ω–∏–∫ –≤ Minecraft –ø—Ä—è–º–æ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.\n\n"
    "‚ùì <i>–ö–æ–≥–¥–∞ –º–µ–Ω—è –¥–æ–±–∞–≤—è—Ç –≤ whitelist?</i>\n"
    "üëâ –û–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
    "‚ùì <i>–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?</i>\n"
    "üëâ ‚ö†Ô∏è –ù–µ—Ç, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω.\n\n"
    "‚ùì <i>–ù–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?</i>\n"
    "üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP.\n\n"
    "‚ùì <i>–ù—É–∂–µ–Ω –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ TLauncher?</i>\n"
    "üëâ –î–∞! –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏.\n\n"
    "‚ùì <i>–ö–∞–∫–∞—è –≤–µ—Ä—Å–∏—è –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞?</i>\n"
    "üëâ 1.21.8.\n\n"
    "‚ùì <i>–ú–æ–∂–Ω–æ –∑–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Bedrock?</i>\n"
    "üëâ –ù–µ—Ç! –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Java Edition.\n\n"
    "–ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
)

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "payments.db"

async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    nick TEXT,
                    status TEXT,
                    time TEXT
                )
            """)
            await db.commit()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

async def save_payment_history(user_id: int, username: Optional[str], nick: Optional[str], status: str):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT INTO payments (user_id, username, nick, status, time) VALUES (?, ?, ?, ?, ?)",
                (user_id, username or "", nick or "", status, now)
            )
            await db.commit()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π")

async def fetch_history(limit: int = 20):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT user_id, username, nick, status, time FROM payments ORDER BY time DESC LIMIT ?",
                (limit,)
            )
            rows = await cursor.fetchall()
            await cursor.close()
            return rows
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        return []

def format_history(rows):
    if not rows:
        return "üìÇ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    text = "üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
    for user_id, username, nick, status, time in rows:
        status_emoji = {"approved": "‚úÖ", "rejected": "‚ùå", "retry_requested": "üìù"}.get(status, "‚ÑπÔ∏è")
        text += (
            f"{status_emoji} ID: <code>{user_id}</code>, user: @{username or ''}, "
            f"–ù–∏–∫: <b>{nick or ''}</b>\n–°—Ç–∞—Ç—É—Å: <i>{status}</i> | –í—Ä–µ–º—è: {time}\n\n"
        )
    return text

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(F.text.in_(["/start", "üöÄ Start"]))
async def start_cmd(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(WELCOME_TEXT, reply_markup=get_start_keyboard(), parse_mode=ParseMode.HTML)

@dp.message(F.text == "üíé –ö—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É")
async def buy_pass(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(PRODUCT_TEXT, reply_markup=get_buy_keyboard(), parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "buy_pass")
async def inline_buy_pass(callback: CallbackQuery):
    await callback.message.answer(PRODUCT_TEXT, reply_markup=get_buy_keyboard(), parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "payment_details")
async def inline_payment_details(callback: CallbackQuery):
    await callback.message.answer(PAYMENT_DETAILS_TEXT, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "support")
async def inline_support(callback: CallbackQuery):
    await callback.message.answer(SUPPORT_TEXT, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.callback_query(F.data == "faq")
async def inline_faq(callback: CallbackQuery):
    await callback.message.answer(FAQ_TEXT, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(SUPPORT_TEXT, disable_web_page_preview=True, parse_mode=ParseMode.HTML)

@dp.message(F.text == "üìñ FAQ")
async def faq(message: Message):
    if not is_private_chat(message):
        return
    await message.answer(FAQ_TEXT, disable_web_page_preview=True, parse_mode=ParseMode.HTML)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ===
@dp.message(F.content_type == ContentType.PHOTO)
async def handle_screenshot(message: Message):
    if not is_private_chat(message):
        return
    if not message.caption or not message.caption.strip():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É.")
        return
    nick_raw = message.caption.strip()
    username = message.from_user.username or message.from_user.first_name or ""
    base_caption = f"–°–∫—Ä–∏–Ω –æ—Ç @{username} (–Ω–∏–∫: {nick_raw})"
    try:
        sent = await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=message.photo[-1].file_id,
            caption=base_caption
        )
        msg_id = sent.message_id
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{msg_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"reject_{msg_id}"),
                InlineKeyboardButton(text="üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data=f"retry_{msg_id}")
            ]]
        )
        caption_storage[msg_id] = {
            "caption": base_caption,
            "user_id": message.from_user.id,
            "username": username,
            "nick": nick_raw
        }
        await bot.edit_message_reply_markup(chat_id=sent.chat.id, message_id=sent.message_id, reply_markup=kb)
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É.")

# === –ê–¥–º–∏–Ω—Å–∫–∏–µ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.callback_query(lambda c: c.data and any(c.data.startswith(p) for p in ["approve_", "reject_", "retry_"]))
async def admin_actions(callback: CallbackQuery):
    action, msg_id_str = callback.data.split("_", 1)
    try:
        msg_id = int(msg_id_str)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    info = caption_storage.get(msg_id)
    if not info:
        await callback.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_id = info["user_id"]
    username = info.get("username") or ""
    nick = info.get("nick") or ""
    caption = info.get("caption", "")
    allowed_admins = [ADMIN_CHAT_ID] if ADMIN_CHAT_ID else []
    if SUPPORT_USER_ID:
        allowed_admins.append(SUPPORT_USER_ID)
    if callback.from_user.id not in allowed_admins:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    status_text = ""
    db_status = ""
    try:
        if action == "approve":
            status_text = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            db_status = "approved"
            await save_payment_history(user_id, username, nick, db_status)
            await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüåê Discord: {DISCORD_LINK}\n\nüñ•Ô∏è IP: {SERVER_IP}\nüñ•Ô∏è IP –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω: {SERVER_IP2}")
        elif action == "reject":
            status_text = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            db_status = "rejected"
            await save_payment_history(user_id, username, nick, db_status)
            await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        elif action == "retry":
            status_text = "üìù –ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"
            db_status = "retry_requested"
            await save_payment_history(user_id, username, nick, db_status)
            await bot.send_message(user_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    new_caption = f"{caption}\n\n{status_text}"
    try:
        await bot.edit_message_caption(chat_id=callback.message.chat.id, message_id=callback.message.message_id, caption=new_caption)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å caption –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    await callback.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

@dp.callback_query(F.data == "refresh_history")
async def refresh_history(callback: CallbackQuery):
    allowed_user_ids = [uid for uid in (SUPPORT_USER_ID, ADMIN_CHAT_ID) if uid]
    if callback.from_user.id not in allowed_user_ids:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    rows = await fetch_history()
    new_text = format_history(rows)
    try:
        current_text = callback.message.text or ""
        if new_text != current_text:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=new_text,
                reply_markup=history_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", show_alert=True)

# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫) ===
# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ, –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫) ===
@dp.message(F.text == "/history")
async def admin_history(message: Message):
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ
    if message.chat.id != ADMIN_CHAT_ID:
        return
    rows = await fetch_history()
    await message.answer(format_history(rows), reply_markup=history_keyboard(), parse_mode=ParseMode.HTML)


@dp.message(F.text == "/clear_history")
async def admin_clear_history(message: Message):
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ
    if message.chat.id != ADMIN_CHAT_ID:
        return
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM payments")
            await db.commit()
        await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –æ—á–∏—â–µ–Ω–∞.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")


# === –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
async def clear_commands():
    try:
        await bot.delete_my_commands()
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã Telegram –æ—á–∏—â–µ–Ω—ã, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã Telegram")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def unknown_message(message: Message):
    if not is_private_chat(message):
        return
    await message.answer("ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
async def init_bot():
    await init_db()
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

async def main():
    await init_bot()
    await clear_commands()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

